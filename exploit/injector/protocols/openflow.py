import os, sys
from mininet.log import setLogLevel
from mininet.topo import Topo
from mininet.net import Mininet
from mininet.node import RemoteController

class OPENFLOW(object):
    
    def __init__(self,ip,msg,field,content):
        self.ip = ip
        self.msg = msg
        self.field = field
        self.content = content
        self.build_packet()
        self.dvc = self.init_device()
        
    def send_msg(self):
        if self.msg == "multipartresponse":
            self.multi_part_response()
        elif self.msg == "packetin":
            self.packet_in()
        elif self.msg == "featureresponse":
            self.feature_response()

    def build_packet(self):
        buf = self.field + "\n" + self.content + "\n"
        with open('/tmp/packet', 'w') as f:
            f.write(buf)

    def init_device(self):
        os.system("./scripts/openflow/ovs_init.sh")
        return

    def multi_part_response(self):
        cmd = "./scripts/openflow/multipart.sh " + self.ip
        os.system(cmd)
        return

    def feature_response(self):
        cmd = "./scripts/openflow/feature.sh " + self.ip
        os.system(cmd)
        return

    def packet_in(self):
        os.system("./scripts/openflow/packetin.sh")
        "Create network"
        c_ip,c_port = self.ip.split(":") 
        setLogLevel( 'info' )
        topo = SingleLoopTopo()
        net = Mininet(topo=topo,
                      controller=None,
                      autoStaticArp=True)
        net.addController("c0",
                          controller=RemoteController,
                          ip=c_ip,
                          port=int(c_port))
        net.start()
        net.pingAll()
        net.stop()
        return

class SingleLoopTopo(Topo):
    # Single switch connected to n hosts
    def __init__(self, **opts):
        # Initialize topology and default optioe
        Topo.__init__(self, **opts)
        switches = []
        hosts = []

        # create switches
        for s in range(1):
            switches.append(self.addSwitch('s%s' % (s + 1), protocols='OpenFlow12'))

        # create hosts
        for h in range(2):
            hosts.append(self.addHost('h%s' % (h + 1)))

        self.addLink(hosts[0], switches[0])
        self.addLink(hosts[1], switches[0])

