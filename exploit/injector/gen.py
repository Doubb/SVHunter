import sys, argparse
import re
import ctypes, os

from protocols.openflow import OPENFLOW

EXP_REX = re.compile(r'([0-9a-zA-Z_]*)\s::\s([0-9a-zA-Z_]*)\s->\s([0-9a-zA-Z_]*)\s=\s(.*)')

def conf_to_cmd(logFile):
	f = open(logFile, 'r')
	log = f.read()
	info = EXP_REX.findall(log)
	if not info or len(info[0]) != 4:
		sys.exit("Error: Wrong Config Format")
	else:
		info = info[0]
	exp_info = {}
	field = ["proto","msg","field","content"]
	for i in range(len(field)):
		exp_info[field[i]] = info[i]
	return exp_info

def parse_command():
	if not os.getuid() == 0:
		sys.exit("Error: Please run as Root ")
	parser = argparse.ArgumentParser()
	parser.add_argument("-l", dest='conf', help="Path of Exploit Conf")
	parser.add_argument("-c", dest='ip', help="IP:PORT for Controller")
	args = parser.parse_args()
	if not args.ip:
		sys.exit("Error: Please specify a controller")
	if args.conf:
		exp_info = conf_to_cmd(args.conf)
		exp_info["ip"] = args.ip
	else:
		sys.exit("Error: Please specify a exploit chain")
	return exp_info

def exp_generator(exp):
	proto = None
	print exp
	if exp["proto"] == "openflow": 
		proto = OPENFLOW(exp['ip'],exp['msg'],exp['field'],exp['content'])
	if exp["proto"] == "netconf": 
		proto = OPENFLOW(exp['ip'],exp['msg'],exp['field'],exp['content'])
	if exp["proto"] == "ovsdb": 
		proto = OPENFLOW(exp['ip'],exp['msg'],exp['field'],exp['content'])	
	if exp["proto"] == "lldp": 
		proto = OPENFLOW(exp['ip'],exp['msg'],exp['field'],exp['content'])

	if proto:
		proto.send_msg()
	else:
		sys.exit("Error: Protocol not Yet Supported!")
	return
 

if __name__ == '__main__':
	exp_info = parse_command()
	exp_generator(exp_info)
	#print exp_info
